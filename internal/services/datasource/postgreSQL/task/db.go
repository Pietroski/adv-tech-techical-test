// Code generated by sqlc. DO NOT EDIT.

package task

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTaskStmt, err = db.PrepareContext(ctx, createTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTask: %w", err)
	}
	if q.deleteTaskStmt, err = db.PrepareContext(ctx, deleteTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTask: %w", err)
	}
	if q.getPaginatedTasksByUserEmailStmt, err = db.PrepareContext(ctx, getPaginatedTasksByUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedTasksByUserEmail: %w", err)
	}
	if q.getPaginatedTasksByUserIDStmt, err = db.PrepareContext(ctx, getPaginatedTasksByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedTasksByUserID: %w", err)
	}
	if q.getTaskStmt, err = db.PrepareContext(ctx, getTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetTask: %w", err)
	}
	if q.getTasksByUserEmailStmt, err = db.PrepareContext(ctx, getTasksByUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetTasksByUserEmail: %w", err)
	}
	if q.getTasksByUserIDStmt, err = db.PrepareContext(ctx, getTasksByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTasksByUserID: %w", err)
	}
	if q.listPaginatedTasksStmt, err = db.PrepareContext(ctx, listPaginatedTasks); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedTasks: %w", err)
	}
	if q.listTasksStmt, err = db.PrepareContext(ctx, listTasks); err != nil {
		return nil, fmt.Errorf("error preparing query ListTasks: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTaskStmt != nil {
		if cerr := q.createTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskStmt: %w", cerr)
		}
	}
	if q.deleteTaskStmt != nil {
		if cerr := q.deleteTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskStmt: %w", cerr)
		}
	}
	if q.getPaginatedTasksByUserEmailStmt != nil {
		if cerr := q.getPaginatedTasksByUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedTasksByUserEmailStmt: %w", cerr)
		}
	}
	if q.getPaginatedTasksByUserIDStmt != nil {
		if cerr := q.getPaginatedTasksByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedTasksByUserIDStmt: %w", cerr)
		}
	}
	if q.getTaskStmt != nil {
		if cerr := q.getTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTaskStmt: %w", cerr)
		}
	}
	if q.getTasksByUserEmailStmt != nil {
		if cerr := q.getTasksByUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTasksByUserEmailStmt: %w", cerr)
		}
	}
	if q.getTasksByUserIDStmt != nil {
		if cerr := q.getTasksByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTasksByUserIDStmt: %w", cerr)
		}
	}
	if q.listPaginatedTasksStmt != nil {
		if cerr := q.listPaginatedTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedTasksStmt: %w", cerr)
		}
	}
	if q.listTasksStmt != nil {
		if cerr := q.listTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTasksStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	createTaskStmt                   *sql.Stmt
	deleteTaskStmt                   *sql.Stmt
	getPaginatedTasksByUserEmailStmt *sql.Stmt
	getPaginatedTasksByUserIDStmt    *sql.Stmt
	getTaskStmt                      *sql.Stmt
	getTasksByUserEmailStmt          *sql.Stmt
	getTasksByUserIDStmt             *sql.Stmt
	listPaginatedTasksStmt           *sql.Stmt
	listTasksStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		createTaskStmt:                   q.createTaskStmt,
		deleteTaskStmt:                   q.deleteTaskStmt,
		getPaginatedTasksByUserEmailStmt: q.getPaginatedTasksByUserEmailStmt,
		getPaginatedTasksByUserIDStmt:    q.getPaginatedTasksByUserIDStmt,
		getTaskStmt:                      q.getTaskStmt,
		getTasksByUserEmailStmt:          q.getTasksByUserEmailStmt,
		getTasksByUserIDStmt:             q.getTasksByUserIDStmt,
		listPaginatedTasksStmt:           q.listPaginatedTasksStmt,
		listTasksStmt:                    q.listTasksStmt,
	}
}
