// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Pietroski/adv-tech-techical-test/internal/services/datasource/postgreSQL/task (interfaces: Store)

// Package mockdbtask is a generated GoMock package.
package mockdbtask

import (
	context "context"
	reflect "reflect"

	task "github.com/Pietroski/adv-tech-techical-test/internal/services/datasource/postgreSQL/task"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockStore) CreateTask(arg0 context.Context, arg1 task.CreateTaskParams) (task.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(task.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockStoreMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStore)(nil).CreateTask), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockStore) DeleteTask(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockStoreMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockStore)(nil).DeleteTask), arg0, arg1)
}

// GetPaginatedTasksByUserEmail mocks base method.
func (m *MockStore) GetPaginatedTasksByUserEmail(arg0 context.Context, arg1 task.GetPaginatedTasksByUserEmailParams) ([]task.GetPaginatedTasksByUserEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedTasksByUserEmail", arg0, arg1)
	ret0, _ := ret[0].([]task.GetPaginatedTasksByUserEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedTasksByUserEmail indicates an expected call of GetPaginatedTasksByUserEmail.
func (mr *MockStoreMockRecorder) GetPaginatedTasksByUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedTasksByUserEmail", reflect.TypeOf((*MockStore)(nil).GetPaginatedTasksByUserEmail), arg0, arg1)
}

// GetPaginatedTasksByUserID mocks base method.
func (m *MockStore) GetPaginatedTasksByUserID(arg0 context.Context, arg1 task.GetPaginatedTasksByUserIDParams) ([]task.GetPaginatedTasksByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedTasksByUserID", arg0, arg1)
	ret0, _ := ret[0].([]task.GetPaginatedTasksByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedTasksByUserID indicates an expected call of GetPaginatedTasksByUserID.
func (mr *MockStoreMockRecorder) GetPaginatedTasksByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedTasksByUserID", reflect.TypeOf((*MockStore)(nil).GetPaginatedTasksByUserID), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockStore) GetTask(arg0 context.Context, arg1 uuid.UUID) (task.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(task.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStoreMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStore)(nil).GetTask), arg0, arg1)
}

// GetTasksByUserEmail mocks base method.
func (m *MockStore) GetTasksByUserEmail(arg0 context.Context) ([]task.GetTasksByUserEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserEmail", arg0)
	ret0, _ := ret[0].([]task.GetTasksByUserEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserEmail indicates an expected call of GetTasksByUserEmail.
func (mr *MockStoreMockRecorder) GetTasksByUserEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserEmail", reflect.TypeOf((*MockStore)(nil).GetTasksByUserEmail), arg0)
}

// GetTasksByUserID mocks base method.
func (m *MockStore) GetTasksByUserID(arg0 context.Context) ([]task.GetTasksByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", arg0)
	ret0, _ := ret[0].([]task.GetTasksByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockStoreMockRecorder) GetTasksByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockStore)(nil).GetTasksByUserID), arg0)
}

// ListPaginatedTasks mocks base method.
func (m *MockStore) ListPaginatedTasks(arg0 context.Context, arg1 task.ListPaginatedTasksParams) ([]task.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedTasks", arg0, arg1)
	ret0, _ := ret[0].([]task.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedTasks indicates an expected call of ListPaginatedTasks.
func (mr *MockStoreMockRecorder) ListPaginatedTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedTasks", reflect.TypeOf((*MockStore)(nil).ListPaginatedTasks), arg0, arg1)
}

// ListTasks mocks base method.
func (m *MockStore) ListTasks(arg0 context.Context) ([]task.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0)
	ret0, _ := ret[0].([]task.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockStoreMockRecorder) ListTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockStore)(nil).ListTasks), arg0)
}
