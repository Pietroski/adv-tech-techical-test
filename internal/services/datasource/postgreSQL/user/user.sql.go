// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package user

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, email, first_name, last_name)
VALUES ($1, $2, $3, $4) RETURNING table_id, user_id, email, first_name, last_name, created_at
`

type CreateUserParams struct {
	UserID    uuid.UUID `json:"userID"`
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.UserID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i Users
	err := row.Scan(
		&i.TableID,
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE
FROM users
WHERE email = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deleteUserByEmailStmt, deleteUserByEmail, email)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE
FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserByIDStmt, deleteUserByID, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT table_id, user_id, email, first_name, last_name, created_at
FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.TableID,
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT table_id, user_id, email, first_name, last_name, created_at
FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (Users, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i Users
	err := row.Scan(
		&i.TableID,
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const listPaginatedUsers = `-- name: ListPaginatedUsers :many
SELECT table_id, user_id, email, first_name, last_name, created_at
FROM users
ORDER BY table_id LIMIT $1
OFFSET $2
`

type ListPaginatedUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaginatedUsers(ctx context.Context, arg ListPaginatedUsersParams) ([]Users, error) {
	rows, err := q.query(ctx, q.listPaginatedUsersStmt, listPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.TableID,
			&i.UserID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT table_id, user_id, email, first_name, last_name, created_at
FROM users
ORDER BY table_id
`

func (q *Queries) ListUsers(ctx context.Context) ([]Users, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.TableID,
			&i.UserID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET (email, first_name, last_name) = ($2, $3, $4)
WHERE user_id = $1 RETURNING table_id, user_id, email, first_name, last_name, created_at
`

type UpdateUserParams struct {
	UserID    uuid.UUID `json:"userID"`
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.UserID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i Users
	err := row.Scan(
		&i.TableID,
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}
